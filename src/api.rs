/* automatically generated by rust-bindgen 0.58.1 */

pub type wchar_t = ::std::os::raw::c_ushort;
pub type WINBOOL = ::std::os::raw::c_int;
pub type BYTE = ::std::os::raw::c_uchar;
pub type DWORD = ::std::os::raw::c_ulong;
pub type LPVOID = *mut ::std::os::raw::c_void;
pub type CHAR = ::std::os::raw::c_char;
pub type LONG = ::std::os::raw::c_long;
pub type WCHAR = wchar_t;
pub type LPSTR = *mut CHAR;
pub type HANDLE = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUID {
    pub Data1: ::std::os::raw::c_ulong,
    pub Data2: ::std::os::raw::c_ushort,
    pub Data3: ::std::os::raw::c_ushort,
    pub Data4: [::std::os::raw::c_uchar; 8usize],
}
pub type GUID = _GUID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FILETIME {
    pub dwLowDateTime: DWORD,
    pub dwHighDateTime: DWORD,
}
pub type FILETIME = _FILETIME;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HWND__ {
    pub unused: ::std::os::raw::c_int,
}
pub type HWND = *mut HWND__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRYPTOAPI_BLOB {
    pub cbData: DWORD,
    pub pbData: *mut BYTE,
}
pub type CRYPT_INTEGER_BLOB = _CRYPTOAPI_BLOB;
pub type CRYPT_OBJID_BLOB = _CRYPTOAPI_BLOB;
pub type CERT_NAME_BLOB = _CRYPTOAPI_BLOB;
pub type CRYPT_DATA_BLOB = _CRYPTOAPI_BLOB;
pub type PCRYPT_ATTR_BLOB = *mut _CRYPTOAPI_BLOB;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRYPT_BIT_BLOB {
    pub cbData: DWORD,
    pub pbData: *mut BYTE,
    pub cUnusedBits: DWORD,
}
pub type CRYPT_BIT_BLOB = _CRYPT_BIT_BLOB;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRYPT_ALGORITHM_IDENTIFIER {
    pub pszObjId: LPSTR,
    pub Parameters: CRYPT_OBJID_BLOB,
}
pub type CRYPT_ALGORITHM_IDENTIFIER = _CRYPT_ALGORITHM_IDENTIFIER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CERT_EXTENSION {
    pub pszObjId: LPSTR,
    pub fCritical: WINBOOL,
    pub Value: CRYPT_OBJID_BLOB,
}
pub type PCERT_EXTENSION = *mut _CERT_EXTENSION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRYPT_ATTRIBUTE {
    pub pszObjId: LPSTR,
    pub cValue: DWORD,
    pub rgValue: PCRYPT_ATTR_BLOB,
}
pub type PCRYPT_ATTRIBUTE = *mut _CRYPT_ATTRIBUTE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRYPT_ATTRIBUTES {
    pub cAttr: DWORD,
    pub rgAttr: PCRYPT_ATTRIBUTE,
}
pub type CRYPT_ATTRIBUTES = _CRYPT_ATTRIBUTES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CERT_PUBLIC_KEY_INFO {
    pub Algorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pub PublicKey: CRYPT_BIT_BLOB,
}
pub type CERT_PUBLIC_KEY_INFO = _CERT_PUBLIC_KEY_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CERT_INFO {
    pub dwVersion: DWORD,
    pub SerialNumber: CRYPT_INTEGER_BLOB,
    pub SignatureAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pub Issuer: CERT_NAME_BLOB,
    pub NotBefore: FILETIME,
    pub NotAfter: FILETIME,
    pub Subject: CERT_NAME_BLOB,
    pub SubjectPublicKeyInfo: CERT_PUBLIC_KEY_INFO,
    pub IssuerUniqueId: CRYPT_BIT_BLOB,
    pub SubjectUniqueId: CRYPT_BIT_BLOB,
    pub cExtension: DWORD,
    pub rgExtension: PCERT_EXTENSION,
}
pub type PCERT_INFO = *mut _CERT_INFO;
pub type HCRYPTMSG = *mut ::std::os::raw::c_void;
extern "system" {
    pub fn CryptMsgClose(hCryptMsg: HCRYPTMSG) -> WINBOOL;
}
extern "system" {
    pub fn CryptMsgGetParam(
        hCryptMsg: HCRYPTMSG,
        dwParamType: DWORD,
        dwIndex: DWORD,
        pvData: *mut ::std::os::raw::c_void,
        pcbData: *mut DWORD,
    ) -> WINBOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CMSG_SIGNER_INFO {
    pub dwVersion: DWORD,
    pub Issuer: CERT_NAME_BLOB,
    pub SerialNumber: CRYPT_INTEGER_BLOB,
    pub HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pub HashEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
    pub EncryptedHash: CRYPT_DATA_BLOB,
    pub AuthAttrs: CRYPT_ATTRIBUTES,
    pub UnauthAttrs: CRYPT_ATTRIBUTES,
}
pub type CMSG_SIGNER_INFO = _CMSG_SIGNER_INFO;
pub type HCERTSTORE = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CERT_CONTEXT {
    pub dwCertEncodingType: DWORD,
    pub pbCertEncoded: *mut BYTE,
    pub cbCertEncoded: DWORD,
    pub pCertInfo: PCERT_INFO,
    pub hCertStore: HCERTSTORE,
}
pub type CERT_CONTEXT = _CERT_CONTEXT;
pub type PCCERT_CONTEXT = *const CERT_CONTEXT;
extern "system" {
    pub fn CertCloseStore(hCertStore: HCERTSTORE, dwFlags: DWORD) -> WINBOOL;
}
extern "system" {
    pub fn CertFindCertificateInStore(
        hCertStore: HCERTSTORE,
        dwCertEncodingType: DWORD,
        dwFindFlags: DWORD,
        dwFindType: DWORD,
        pvFindPara: *const ::std::os::raw::c_void,
        pPrevCertContext: PCCERT_CONTEXT,
    ) -> PCCERT_CONTEXT;
}
extern "system" {
    pub fn CertGetNameStringA(
        pCertContext: PCCERT_CONTEXT,
        dwType: DWORD,
        dwFlags: DWORD,
        pvTypePara: *mut ::std::os::raw::c_void,
        pszNameString: LPSTR,
        cchNameString: DWORD,
    ) -> DWORD;
}
extern "system" {
    pub fn CryptQueryObject(
        dwObjectType: DWORD,
        pvObject: *const ::std::os::raw::c_void,
        dwExpectedContentTypeFlags: DWORD,
        dwExpectedFormatTypeFlags: DWORD,
        dwFlags: DWORD,
        pdwMsgAndCertEncodingType: *mut DWORD,
        pdwContentType: *mut DWORD,
        pdwFormatType: *mut DWORD,
        phCertStore: *mut HCERTSTORE,
        phMsg: *mut HCRYPTMSG,
        ppvContext: *mut *const ::std::os::raw::c_void,
    ) -> WINBOOL;
}
pub type HCATADMIN = HANDLE;
pub type HCATINFO = HANDLE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CATALOG_INFO_ {
    pub cbStruct: DWORD,
    pub wszCatalogFile: [WCHAR; 260usize],
}
pub type CATALOG_INFO = CATALOG_INFO_;
extern "system" {
    pub fn CryptCATAdminAcquireContext(
        arg1: *mut HCATADMIN,
        arg2: *const GUID,
        arg3: DWORD,
    ) -> WINBOOL;
}
extern "system" {
    pub fn CryptCATAdminCalcHashFromFileHandle(
        arg1: HANDLE,
        arg2: *mut DWORD,
        arg3: *mut BYTE,
        arg4: DWORD,
    ) -> WINBOOL;
}
extern "system" {
    pub fn CryptCATAdminEnumCatalogFromHash(
        arg1: HCATADMIN,
        arg2: *mut BYTE,
        arg3: DWORD,
        arg4: DWORD,
        arg5: *mut HCATINFO,
    ) -> HCATINFO;
}
extern "system" {
    pub fn CryptCATAdminReleaseCatalogContext(
        arg1: HCATADMIN,
        arg2: HCATINFO,
        arg3: DWORD,
    ) -> WINBOOL;
}
extern "system" {
    pub fn CryptCATAdminReleaseContext(arg1: HCATADMIN, arg2: DWORD) -> WINBOOL;
}
extern "system" {
    pub fn CryptCATCatalogInfoFromContext(
        arg1: HCATINFO,
        arg2: *mut CATALOG_INFO,
        arg3: DWORD,
    ) -> WINBOOL;
}
extern "system" {
    pub fn WinVerifyTrust(hwnd: HWND, pgActionID: *mut GUID, pWVTData: LPVOID) -> LONG;
}
